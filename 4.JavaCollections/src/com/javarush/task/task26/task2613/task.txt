CashMachine (9)
Сегодня мы займемся командой ExitCommand.
1. Реализуй следующую логику в команде ExitCommand:
1.1. Спросить, действительно ли пользователь хочет выйти - варианты <y,n>.
1.2. Если пользователь подтвердит свои намерения, то попрощаться с ним.
1.3. Если пользователь не подтвердит свои намерения, то не прощаться с ним, а просто выйти.

Это всё хорошо, но бывают случаи, когда срочно нужно прервать операцию, например, если пользователь ошибся с выбором операции.
Для этого у нас есть InterruptOperationException.
2.Реализуй следующую логику:
2.1. Если пользователь в любом месте ввел текст 'EXIT' любым регистром, то выбросить InterruptOperationException.
2.2. Найди единственное место, куда нужно вставить эту логику. Реализуй функционал в этом единственном методе.

3. Заверни тело метода main в try-catch и обработай исключение InterruptOperationException.
Попрощайся с пользователем в блоке catch используя ConsoleHelper.

Требования:
1. В классе ExitCommand в методе execute() спроси у пользователя действительно ли хочет ли выйти - варианты <y,n>. Если пользователь подтвердит свои намерения, то попрощаться с ним, если нет, то не прощаться с ним, а просто выйти.
2. Реализуй логику с прерыванием операций (пробрасыванием исключения InterruptOperationException).
3. Метод main не должен бросать исключения.

CashMachine (8)
Пора привести в порядок наш main, уж очень там всего много, чего не должно быть.

1. Перенеси логику из main в DepositCommand и InfoCommand.
Проверим, что там стало с main? Цикл, в котором спрашиваем операцию у пользователя, а потом вызываем метод у CommandExecutor.
И так до бесконечности... надо бы придумать условие выхода из цикла.
Исправь цикл, чтоб он стал do-while. Условие выхода - операция EXIT.

2. Давай запустим прогу и пополним счет на EUR 100 2 и USD 20 6, и посмотрим на INFO.
Ничего не понятно, т.к. создались 2 манипулятора: первый для EUR, второй для USD.
Давай улучшим логику InfoCommand. Надо вывести баланс по каждому манипулятору.

2.1. В классе CurrencyManipulatorFactory создай статический метод getAllCurrencyManipulators(), который вернет Collection всех манипуляторов.
У тебя все манипуляторы хранятся в карте, не так ли? Если нет, то отрефактори.
2.2. В InfoCommand в цикле выведите [код валюты - общая сумма денег для выбранной валюты].
Запустим прогу и пополним счет на EUR 100 2 и USD 20 6, и посмотрим на INFO.

Все работает правильно?
EUR - 200
USD - 120
Отлично!

3. Запустим прогу и сразу первой операцией попросим INFO. Ничего не вывело? Непорядок.
Добавь в манипулятор метод boolean hasMoney(), который будет показывать, добавлены ли какие-то банкноты или нет.

4. В InfoCommand используй метод п.3. и выведите фразу "No money available.", если нет денег в банкомате.

Требования:
1. В классе CurrencyManipulatorFactory должен быть публичный статический метод Collection <CurrencyManipulator> getAllCurrencyManipulators().
2. В классе CurrencyManipulator должен быть метод boolean hasMoney().
3. В классе InfoCommand в методе execute() для каждого манипулятора выведи: "код валюты - общая сумма денег для выбранной валюты", если денег нет в банкомате выведи фразу, "No money available.".
4. В классе DepositCommand в методе execute() запроси код валюты, потом запроси номинал и количество банкнот, а потом добавь их в манипулятор. Если номинал и количество банкнот пользователь ввел не правильно(не числа) - повторять попытку по введению номинала и количества банкнот.
5. В методе main класса CashMachine запроси операцию у пользователя. Выполни операцию в CommandExecutor. Повторять пока пользователь не выбрал операцию EXIT.

CashMachine (7)
Возвращаемся к паттерну Command.

1. Создай пакет command, в нем будут все классы, относящиеся к этой логике.
Подумай над модификатором доступа для всех классов в этом пакете.

2. Создай интерфейс Command с методом void execute().

3. Для каждой операции создай класс-команду, удовлетворяющую паттерну Command.
Имена классов DepositCommand, InfoCommand, WithdrawCommand, ExitCommand.

4. Создай public класс CommandExecutor, через который можно будет взаимодействовать со всеми командами.
Создай ему статическую карту Map<Operation, Command> allKnownCommandsMap, которую проинициализируй всеми известными нам операциями и командами.

4.1 Создай метод public static final void execute(Operation operation), который будет дергать метод execute у нужной команды.
Реализуй эту логику.
4.2. Расставь правильно модификаторы доступа учитывая, что единственная точка входа - это метод execute.

Проверяем, чтоб структура соответствовала тестам на сервере.
Логику будем переносить в следующем таске.

Требования:
•	Интерфейс Command должен быть создан в отдельном файле.
•	В интерфейсе Command должен быть метод void execute().
•	В отдельном файле должен быть создан класс DepositCommand, реализующий интерфейс Command.
•	В отдельном файле должен быть создан класс InfoCommand, реализующий интерфейс Command.
•	В отдельном файле должен быть создан класс WithdrawCommand, реализующий интерфейс Command.
•	В отдельном файле должен быть создан класс ExitCommand, реализующий интерфейс Command.
•	В отдельном файле должен быть создан класс CommandExecutor.
•	Класс CommandExecutor должен содержать приватное статическое поле Map<Operation, Command> allKnownCommandsMap.
•	Класс CommandExecutor должен содержать public static final void метод execute(Operation operation).
•	Класс CommandExecutor должен содержать приватный конструктор.
•	Поле Map<Operation, Command> allKnownCommandsMap класса CommandExecutor должно быть проинициализировано всеми известными нам операциями и командами.

CashMachine (6)
Чтобы отрефакторить код в соответствии с паттерном Command, нужно выделить в коде несколько логических блоков кода.
У нас пока два таких блока: 1) код операции DEPOSIT, 2) код операции INFO.
Они захардкожены в методе main. Нужно от этого избавиться.
Нужно сделать так, чтобы пользователь сам выбирал, какую операцию на данный момент нужно выполнять.

1. В энум Operation добавь статический метод Operation getAllowableOperationByOrdinal(Integer i)
Должен возвращать элемент энума: для 1 - INFO, 2 - DEPOSIT, 3 - WITHDRAW, 4 - EXIT;
На некорректные данные бросать IllegalArgumentException.

2. В классе ConsoleHelper реализуй логику статического метода Operation askOperation().
Спросить у пользователя операцию.
Если пользователь вводит 1, то выбирается команда INFO, 2 - DEPOSIT, 3 - WITHDRAW, 4 - EXIT;
Используйте метод, описанный в п.1.
Обработай исключение - запроси данные об операции повторно.


Требования:
1. Энум Operation должен иметь статический метод Operation getAllowableOperationByOrdinal(Integer i).
2. Класс ConsoleHelper должен иметь метод Operation askOperation().

CashMachine (5)
1.В предыдущем таске мы реализовали основную логику операции DEPOSIT.
Но посмотреть результат так и не удалось.
Поэтому создай в манипуляторе метод int getTotalAmount(), который посчитает общую сумму денег для выбранной валюты.

2. Добавь вызов метода getTotalAmount() в метод main.
Всё работает верно? Тогда движемся дальше.
Видно, что метод getTotalAmount() считает то, что нам необходимо для операции INFO.
Поэтому пришло время небольшого рефакторинга.
!!Читайте паттерн Command.
Однако, перед рефакторингом нужно еще разобраться в одном вопросе. Но об этом не сейчас.


Требования:
1. Класс CurrencyManipulator должен иметь метод int getTotalAmount().
2. Метод main класса CashMachine должен вызывать метод getTotalAmount() у объекта класса CurrencyManipulator.

CashMachine (4)
1. Выберем операцию, с которой мы сможем начать.
Подумаем. В банкомате еще денег нет, поэтому INFO и WITHDRAW протестить не получится.
Начнем с операции DEPOSIT - поместить деньги.
Считаем с консоли код валюты, потом считаем номинал и количество банкнот, а потом добавим их в манипулятор.

2. Чтобы считать код валюты, добавим статический метод String askCurrencyCode() в ConsoleHelper.
Этот метод должен предлагать пользователю ввести код валюты, проверять, что код содержит 3 символа.
Если данные некорректны, то сообщить об этом пользователю и повторить.
Если данные валидны, то перевести код в верхний регистр и вернуть.

3. Чтобы считать номинал и количество банкнот, добавим статический метод String[] getValidTwoDigits(String currencyCode) в ConsoleHelper.
Этот метод должен предлагать пользователю ввести два целых положительных числа.
Первое число - номинал, второе - количество банкнот.
Никаких валидаторов на номинал нет. Т.е. 1200 - это нормальный номинал.
Если данные некорректны, то сообщить об этом пользователю и повторить.

Пример вводимых данных:
200 5

4. В классе CurrencyManipulator создай метод void addAmount(int denomination, int count), который добавит введенные номинал и количество банкнот.

5. Пора уже увидеть приложение в действии.
В методе main захардкодь логику пункта 1.
Кстати, чтобы не было проблем с тестами на стороне сервера, добавь в метод main первой строчкой Locale.setDefault(Locale.ENGLISH);
Запускаем, дебажим, смотрим.

Требования:
1. Класс ConsoleHelper должен иметь статический метод String askCurrencyCode().
2. Класс ConsoleHelper должен иметь статический метод String[] getValidTwoDigits(String currencyCode).
3. Класс CurrencyManipulator должен иметь метод void addAmount(int denomination, int count).
4. Метод main класса CashMachine должен считывать с консоли код валюты, потом считывать номинал и количество банкнот, а потом добавлять их в манипулятор.

CashMachine (3)
1. Создай класс CurrencyManipulator, который будет хранить всю информацию про выбранную валюту.
Класс должен содержать:
1.1 String currencyCode - код валюты, например, USD. Состоит из трех букв.
1.2 Map<Integer, Integer> denominations - это Map<номинал, количество>.
Чтобы можно было посмотреть, к какой валюте относится манипулятор, добавим геттер для currencyCode.
Очевидно, что манипулятор никак не может функционировать без названия валюты, поэтому добавим конструктор с этим параметром и проинициализируем currencyCode.

2. Валют может быть несколько, поэтому нам понадобится фабрика, которая будет создавать и хранить манипуляторы.
Создай класс CurrencyManipulatorFactory со статическим методом getManipulatorByCurrencyCode(String currencyCode).
В этом методе будем создавать нужный манипулятор, если он еще не существует, либо возвращать ранее созданный.
Регистр при поиске манипулятора валюты не должен учитываться.
Подумай, где лучше хранить все манипуляторы? Маленькая подсказка, поле должно называться map.

Сделайте так, чтобы невозможно было создавать объекты CurrencyManipulatorFactory класса.

Требования:
•	Класс CurrencyManipulator должен быть создан в отдельном файле.
•	Класс CurrencyManipulator должен содержать приватное поле String currencyCode.
•	Класс CurrencyManipulator должен содержать приватное поле Map<Integer, Integer> denominations.
•	Класс CurrencyManipulator должен содержать геттер для поля currencyCode.
•	Класс CurrencyManipulator должен содержать конструктор с одним параметром, инициализирующий поле currencyCode.
•	Класс CurrencyManipulatorFactory должен быть создан в отдельном файле.
•	Класс CurrencyManipulatorFactory должен иметь приватный дефолтный конструктор.
•	Класс CurrencyManipulatorFactory должен содержать приватное статическое поле Map<String, CurrencyManipulator> map.
•	Класс CurrencyManipulatorFactory должен иметь статический метод getManipulatorByCurrencyCode(String currencyCode).

CashMachine (2)
1. Создай в ConsoleHelper два статических метода:
1.1 writeMessage(String message), который будет писать в консоль наше сообщение.
1.2 String readString(), который будет считывать с консоли строку и возвращать ее.
Если возникнет какое-то исключение при работе с консолью, то перехватим его и не будем обрабатывать.
Кстати, создадим только один экземпляр BufferedReader-а, в статическом поле bis.

2. Создай пакет exception, в который поместим два checked исключения:
2.1 InterruptOperationException будем кидать, когда нужно прервать текущую операцию и выйти из приложения.
2.2 NotEnoughMoneyException будем кидать, когда не сможем выдать запрашиваемую сумму.

Требования:
•	Класс InterruptOperationException должен быть создан в отдельном файле, и быть checked исключением.
•	Класс NotEnoughMoneyException должен быть создан в отдельном файле, и быть checked исключением.
•	Класс ConsoleHelper должен содержать приватное статическое поле BufferedReader bis, которое должно быть сразу проинициализировано.
•	Класс ConsoleHelper должен содержать публичный статический метод writeMessage(String message), который должен выводить в консоль переданный параметр.
•	Класс ConsoleHelper должен содержать публичный статический метод readString(), который должен считывать с консоли строку и возвращать ее.

CashMachine (1)
Давай напишем эмулятор работы банкомата.

Операции, которые будем поддерживать, следующие:
поместить деньги, снять деньги, показать состояние банкомата.
Также будем поддерживать мультивалютность.
Купюрами будем оперировать теми, которые поместим в банкомат.
Если для снятия требуемой суммы будет недостаточно банкнот, то сообщим юзеру об этом.
Понятно, что всё должно быть user friendly, поэтому придется наводить рюшечки.

Итак:
1. Создай класс CashMachine с методом main.
2. Наши операции зададим в энуме Operation: INFO, DEPOSIT, WITHDRAW.
Т.к. всё должно быть user friendly, то на выход из приложения надо попрощаться с юзером.
Поэтому добавим еще операцию EXIT.
3. Т.к мы будем активно общаться с юзером, то будет много выводимого текста.
Чтобы работу с консолью сосредоточить в одном месте, создадим класс ConsoleHelper.

Требования:
•	Класс CashMachine должен быть создан в отдельном файле.
•	Енум Operation должен быть создан в отдельном файле.
•	Класс ConsoleHelper должен быть создан в отдельном файле.
•	В классе CashMachine должен быть создан метод public static void main (String[] args).
•	В енуме Operation должны быть такие значения: INFO, DEPOSIT, WITHDRAW, EXIT.